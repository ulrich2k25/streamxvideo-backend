const express = require("express");
const fs = require("fs");
const path = require("path");

const videoRouter = express.Router();
const UPLOADS_DIR = path.join(__dirname, "..", "uploads");

// üìå Middleware pour v√©rifier l'abonnement avant t√©l√©chargement
const verifyAbonn√© = (req, res, next) => {
    const user = req.headers["user-email"]; // L'email est envoy√© dans l'en-t√™te

    // Simuler une base de donn√©es des abonn√©s (√† remplacer par une vraie DB)
    const abonn√©s = ["user1@email.com", "user2@email.com"];

    if (!user || !abonn√©s.includes(user)) {
        return res.status(403).json({ message: "üö´ Acc√®s refus√© : Vous devez √™tre abonn√©." });
    }
    next();
};

// üìå Route pour r√©cup√©rer la liste des vid√©os
videoRouter.get("/", async (req, res) => {
    try {
        const files = fs.readdirSync(UPLOADS_DIR).map((file) => ({
            file,
            url: `/uploads/${file}`,
        }));
        res.json(files);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// üìå Route s√©curis√©e pour t√©l√©charger une vid√©o
videoRouter.get("/download/:filename", verifyAbonn√©, (req, res) => {
    const filePath = path.join(UPLOADS_DIR, req.params.filename);
    if (fs.existsSync(filePath)) {
        res.download(filePath);
    } else {
        res.status(404).json({ message: "‚ùå Fichier introuvable." });
    }
});

module.exports = videoRouter;

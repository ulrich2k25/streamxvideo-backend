const express = require("express");
const db = require("../db"); // Connexion MySQL
const AWS = require("aws-sdk");

const videoRouter = express.Router();

// üìå üî• Configuration d'Amazon S3
const s3 = new AWS.S3({
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    region: process.env.AWS_REGION,
});

// üìå Middleware pour v√©rifier l'abonnement
const verifyAbonn√© = (req, res, next) => {
    const { userEmail } = req.headers;

    if (!userEmail) {
        return res.status(400).json({ message: "‚ö†Ô∏è Email requis pour v√©rifier l'abonnement." });
    }

    db.query("SELECT isSubscribed FROM users WHERE email = ?", [userEmail], (err, results) => {
        if (err) {
            return res.status(500).json({ error: "‚ùå Erreur MySQL lors de la v√©rification." });
        }
        if (results.length === 0 || results[0].isSubscribed !== 1) {
            return res.status(403).json({ message: "üö´ Acc√®s refus√© : Vous devez √™tre abonn√©." });
        }
        next();
    });
};

// üìå Route GET : R√©cup√©rer la liste des vid√©os depuis MySQL
videoRouter.get("/", (req, res) => {
    db.query("SELECT id, title, file_path, uploaded_at FROM videos", (err, results) => {
        if (err) {
            return res.status(500).json({ error: "‚ùå Erreur lors de la r√©cup√©ration des vid√©os." });
        }
        res.json(results);
    });
});

// üìå Route s√©curis√©e pour r√©cup√©rer une URL de lecture vid√©o S3
videoRouter.get("/watch/:id", verifyAbonn√©, async (req, res) => {
    const { id } = req.params;

    db.query("SELECT file_path FROM videos WHERE id = ?", [id], async (err, results) => {
        if (err || results.length === 0) {
            return res.status(404).json({ message: "‚ùå Vid√©o introuvable." });
        }

        const fileUrl = results[0].file_path;

        // G√©n√©rer une URL sign√©e S3 (expirable)
        const url = s3.getSignedUrl("getObject", {
            Bucket: process.env.AWS_S3_BUCKET_NAME,
            Key: fileUrl.split("/").pop(),
            Expires: 3600, // URL valable 1 heure
        });

        res.json({ message: "‚úÖ Acc√®s autoris√©", videoUrl: url });
    });
});

module.exports = videoRouter;
